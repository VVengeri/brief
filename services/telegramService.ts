import { IFormData } from '../types';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ—Ç–æ–≤–æ–≥–æ –¢–ó –≤ Telegram
 */
export class TelegramService {
    private static readonly BOT_TOKEN = '8330890674:AAFMKhcjRk5T-FpR59gner1EAI07EwJeV5k';
    private static readonly CHAT_ID = '423198533';

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTML-—Ñ–∞–π–ª –±—Ä–∏—Ñ –≤ Telegram
     */
    static async sendBriefToTelegram(htmlContent: string, formData: IFormData): Promise<boolean> {
        try {
            const clientName = formData.client.name.trim().split(' ')[0] || 'Client';
            const projectAddress = formData.project.address.trim().replace(/[^a-zA-Z0-9–ê-–Ø–∞-—è\s-]/gi, '').replace(/\s+/g, '_') || 'Project';
            const filename = `–ë—Ä–∏—Ñ_${clientName}_${projectAddress}.html`;

            // –°–æ–∑–¥–∞–µ–º Blob –∏–∑ HTML –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            const blob = new Blob([htmlContent], { type: 'text/html;charset=utf-8' });
            const file = new File([blob], filename, { type: 'text/html' });

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            const message = `üé® *–ù–æ–≤—ã–π –±—Ä–∏—Ñ –Ω–∞ –¥–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç*\n\n` +
                `üë§ *–ö–ª–∏–µ–Ω—Ç:* ${formData.client.name}\n` +
                `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${formData.client.phone}\n` +
                `üìß *Email:* ${formData.client.email}\n` +
                `üè† *–ê–¥—Ä–µ—Å:* ${formData.project.address}\n` +
                `üìê *–ü–ª–æ—â–∞–¥—å:* ${formData.project.area} –º¬≤\n\n` +
                `üìé *–§–∞–π–ª –±—Ä–∏—Ñ:* ${filename}`;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º —á–µ—Ä–µ–∑ Telegram Bot API
            const formData_telegram = new FormData();
            formData_telegram.append('chat_id', this.CHAT_ID);
            formData_telegram.append('text', message);
            formData_telegram.append('parse_mode', 'Markdown');
            formData_telegram.append('document', file);

            const response = await fetch(`https://api.telegram.org/bot${this.BOT_TOKEN}/sendDocument`, {
                method: 'POST',
                body: formData_telegram
            });

            if (response.ok) {
                const result = await response.json();
                return result.ok;
            } else {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', await response.text());
                return false;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:', error);
            return false;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –±—Ä–∏—Ñ (–±–µ–∑ —Ñ–∞–π–ª–∞)
     */
    static async sendNotification(formData: IFormData): Promise<boolean> {
        try {
            const message = `üé® *–ù–æ–≤—ã–π –±—Ä–∏—Ñ –Ω–∞ –¥–∏–∑–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç*\n\n` +
                `üë§ *–ö–ª–∏–µ–Ω—Ç:* ${formData.client.name}\n` +
                `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${formData.client.phone}\n` +
                `üìß *Email:* ${formData.client.email}\n` +
                `üè† *–ê–¥—Ä–µ—Å:* ${formData.project.address}\n` +
                `üìê *–ü–ª–æ—â–∞–¥—å:* ${formData.project.area} –º¬≤\n\n` +
                `üí¨ *–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä:* ${formData.client.messenger.join(', ')}\n` +
                `‚è∞ *–°—Ä–æ–∫–∏:* ${formData.budget.deadline}\n` +
                `üí∞ *–ë—é–¥–∂–µ—Ç:* ${formData.budget.range}`;

            const response = await fetch(`https://api.telegram.org/bot${this.BOT_TOKEN}/sendMessage`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    chat_id: this.CHAT_ID,
                    text: message,
                    parse_mode: 'Markdown'
                })
            });

            if (response.ok) {
                const result = await response.json();
                return result.ok;
            } else {
                console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', await response.text());
                return false;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram:', error);
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ —Å–µ—Ä–≤–∏—Å
     */
    static isConfigured(): boolean {
        return this.BOT_TOKEN !== 'YOUR_BOT_TOKEN' && this.CHAT_ID !== 'YOUR_CHAT_ID';
    }
}
